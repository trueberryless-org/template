@page "/login"
@using Model.Entities.Authentication.Models

<PageTitle>Login</PageTitle>

<MudContainer Class="mt-8 my-login-container" >
    <MudStack Spacing="4">
        <h1 class="ms-4 mb-12">Log In</h1>
        
        <div @onkeydown="@TryLogin">
            <MudForm @ref="_from">
                @if (_error is not null)
                {
                    <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="() => _error = null">
                        @(_error)
                    </MudAlert>
                }
                
                <MudTextField
                    T="string" Immediate="true" InputType="InputType.Text" InputMode="InputMode.text"
                    Label="Email"
                    @bind-Value="Model.Email"
                    For="() => Model.Email"/>
                
                <MudTextField
                    T="string" Immediate="true" InputMode="InputMode.text"
                    Label="Password" Class="mt-3"
                    InputType="_passwordInputType" Adornment="Adornment.End"
                    AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ShowPwd"
                    @bind-Value="Model.Password"
                    For="() => Model.Password"/>
            </MudForm>
        </div>
        
        <MudOverlay @bind-Visible="_isLoggingIn" DarkBackground="true" AutoClose="false" LockScroll="true" Absolute="true" Style="position: fixed; top: 0; bottom: 0; left: 0; right: 0;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large"/>
        </MudOverlay>
        
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await HandleLoginAsync()">Login</MudButton>
            <MudSpacer/>
            <a href="/register">
                <MudText Typo="Typo.subtitle1">
                    Don't have an account?
                </MudText>
            </a>
        </MudCardActions>
    </MudStack>
</MudContainer>

<style>
    body {
        background: url('https://images.unsplash.com/photo-1527769929977-c341ee9f2033?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80');
        background-size: cover;
        background-repeat: no-repeat;
        min-height: 100vh;
        overflow: hidden;
    }
    
    .my-login-container {
        position: absolute;
        top: 20rem;   
    }
    
    .my-login-container::after {
        content: '';
        position: absolute;
        inset: -20rem;
        top: -10rem;
        background: -moz-linear-gradient(180deg, rgba(44,62,80,0) 0%, rgba(44,62,80,0.5) 33%, rgba(44,62,80,0.5) 66%, rgba(44,62,80,0) 100%);
        background: -webkit-linear-gradient(180deg, rgba(44,62,80,0) 0%, rgba(44,62,80,0.5) 33%, rgba(44,62,80,0.5) 66%, rgba(44,62,80,0) 100%);
        background: linear-gradient(180deg, rgba(44,62,80,0) 0%, rgba(44,62,80,0.5) 33%, rgba(44,62,80,0.5) 66%, rgba(44,62,80,0) 100%);
        z-index: -1;
    }
</style>

@code {
    bool _isLoggingIn;

    MudForm _from = null!;
    string? _error;

    bool _isShow;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType _passwordInputType = InputType.Password;
    
    LoginModel Model { get; } = new();

    void ShowPwd()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInputType = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInputType = InputType.Text;
        }
    }

    async void TryLogin(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
            await HandleLoginAsync();
    }

    async Task HandleLoginAsync()
    {
        try
        {
            if (!await _from.IsFormValidAsync()) return;
            _isLoggingIn = true;
            await UserService.LoginAsync(Model);
            NavigationManager.NavigateTo("/");
        }
        catch (LoginException)
        {
            _error = "Invalid email or password";
            Snackbar.Add($"Invalid email of password!", Severity.Error);
        }
        catch (TaskCanceledException)
        {
            Logger.LogInformation("Login canceled");
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Login canceled");
        }
        catch (Exception e)
        {
            Logger.LogCritical("Login failed: {Message} \n", e.Message);
            Logger.LogCritical("Login failed: {StackTrace} \n", e.StackTrace);
        }
        finally
        {
            _isLoggingIn = false;
        }
    }

}